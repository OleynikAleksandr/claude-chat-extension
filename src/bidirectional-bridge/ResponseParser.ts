/**
 * ResponseParser - –ú–∏–∫—Ä–æ–∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ Claude Code
 * –†–∞–∑–º–µ—Ä: <150 —Å—Ç—Ä–æ–∫
 * –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
 */

export interface ParsedResponse {
    content: string;
    isComplete: boolean;
    timestamp: number;
    responseType: 'text' | 'thinking' | 'tool' | 'error' | 'system';
    metadata?: {
        sessionId?: string;
        messageId?: string;
        duration?: number;
    };
}

export interface ParsingOptions {
    filterThinking?: boolean;
    filterSystem?: boolean;
    extractMetadata?: boolean;
    timeoutMs?: number;
}

export class ResponseParser {
    private static readonly THINKING_MARKERS = [
        '<thinking>',
        '</thinking>',
        'Claude is thinking...',
        'I need to think about'
    ];

    private static readonly SYSTEM_MARKERS = [
        'üîÑ ',
        '‚úÖ ',
        '‚ùå ',
        'üîß ',
        'üìù ',
        'üöÄ '
    ];

    private static readonly ERROR_MARKERS = [
        'Error:',
        'error:',
        'ERROR:',
        'Failed:',
        'Exception:',
        'Warning:'
    ];

    private static readonly TOOL_MARKERS = [
        '<function_calls>',
        '</function_calls>',
        '<invoke',
        'tool_use',
        'function_result'
    ];

    private options: ParsingOptions;

    constructor(options: ParsingOptions = {}) {
        this.options = {
            filterThinking: options.filterThinking ?? false,
            filterSystem: options.filterSystem ?? true,
            extractMetadata: options.extractMetadata ?? true,
            timeoutMs: options.timeoutMs ?? 30000
        };
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude Code
     */
    parseResponse(rawText: string): ParsedResponse {
        const timestamp = Date.now();
        const responseType = this.detectResponseType(rawText);
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
        if (this.shouldFilterResponse(responseType)) {
            return {
                content: '',
                isComplete: true,
                timestamp,
                responseType,
                metadata: { messageId: this.generateMessageId() }
            };
        }

        const content = this.cleanResponse(rawText, responseType);
        const isComplete = this.isResponseComplete(content, responseType);
        const metadata = this.options.extractMetadata ? this.extractMetadata(rawText) : undefined;

        return {
            content,
            isComplete,
            timestamp,
            responseType,
            metadata
        };
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
     */
    private detectResponseType(text: string): ParsedResponse['responseType'] {
        const lowerText = text.toLowerCase();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        if (ResponseParser.ERROR_MARKERS.some(marker => lowerText.includes(marker.toLowerCase()))) {
            return 'error';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (ResponseParser.SYSTEM_MARKERS.some(marker => text.includes(marker))) {
            return 'system';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ thinking
        if (ResponseParser.THINKING_MARKERS.some(marker => lowerText.includes(marker.toLowerCase()))) {
            return 'thinking';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ tool usage
        if (ResponseParser.TOOL_MARKERS.some(marker => lowerText.includes(marker.toLowerCase()))) {
            return 'tool';
        }

        return 'text';
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
     */
    private cleanResponse(text: string, responseType: ParsedResponse['responseType']): string {
        let cleaned = text.trim();

        // –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        if (responseType === 'system') {
            ResponseParser.SYSTEM_MARKERS.forEach(marker => {
                cleaned = cleaned.replace(new RegExp(marker, 'g'), '');
            });
        }

        // –£–¥–∞–ª—è–µ–º thinking —Ç–µ–≥–∏
        if (responseType === 'thinking') {
            cleaned = cleaned.replace(/<thinking>|<\/thinking>/g, '');
        }

        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        cleaned = cleaned.replace(/\n\s*\n/g, '\n').trim();

        return cleaned;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
     */
    private isResponseComplete(content: string, responseType: ParsedResponse['responseType']): boolean {
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        if (responseType === 'system' || responseType === 'error') {
            return true;
        }

        // Thinking –±–ª–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã
        if (responseType === 'thinking') {
            return !content.includes('<thinking>') || content.includes('</thinking>');
        }

        // Tool calls –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        if (responseType === 'tool') {
            return content.includes('</function_calls>') || content.includes('function_result');
        }

        // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        return content.length > 0 && !content.endsWith('...');
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
     */
    private extractMetadata(text: string): ParsedResponse['metadata'] {
        const metadata: ParsedResponse['metadata'] = {
            messageId: this.generateMessageId()
        };

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        const sessionMatch = text.match(/session[_-]([a-zA-Z0-9]+)/i);
        if (sessionMatch) {
            metadata.sessionId = sessionMatch[1];
        }

        // –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –¥–ª–∏–Ω–µ
        metadata.duration = Math.max(100, text.length * 2);

        return metadata;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
     */
    private shouldFilterResponse(responseType: ParsedResponse['responseType']): boolean {
        if (this.options.filterThinking && responseType === 'thinking') {
            return true;
        }

        if (this.options.filterSystem && responseType === 'system') {
            return true;
        }

        return false;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private generateMessageId(): string {
        return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
     */
    updateOptions(newOptions: Partial<ParsingOptions>): void {
        this.options = { ...this.options, ...newOptions };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏
     */
    getOptions(): ParsingOptions {
        return { ...this.options };
    }
}