/**
 * JSONL Response Monitor - –ü–û–¢–û–ö 2: Terminal ‚Üí Extension
 * –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç Claude Code —á–µ—Ä–µ–∑ JSONL —Ñ–∞–π–ª—ã
 * –†–∞–∑–º–µ—Ä: <200 —Å—Ç—Ä–æ–∫
 */

import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import { Message, ServiceMessage, ServiceInfoDetected, ToolUseItem, UsageInfo } from '../types/Session';

// üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Claude Code JSONL –¥–ª—è Enhanced ServiceInfo
export interface ClaudeCodeJsonlEntry {
    type: 'user' | 'assistant' | 'summary';
    message?: {
        id?: string;
        role: 'user' | 'assistant';
        model?: string;
        content: Array<{
            type: 'text' | 'tool_use' | 'thinking';
            text?: string;
            id?: string;
            name?: string;
            input?: any;
        }> | string;
        stop_reason?: string | null;
        stop_sequence?: string | null;
        usage?: {
            input_tokens: number;
            output_tokens: number;
            cache_creation_input_tokens?: number;
            cache_read_input_tokens?: number;
            service_tier?: string;
        };
    };
    timestamp: string;
    sessionId?: string;
    parentUuid?: string;
    version?: string;
}

// –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export interface JsonlEntry {
    role: 'user' | 'assistant';
    content: string;
    timestamp?: number;
}

// üîß –§–æ—Ä–º–∞—Ç summary –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ resume —Å–µ—Å—Å–∏–∏
export interface SummaryEntry {
    type: 'summary';
    summary: string;
    leafUuid?: string;
}

export interface ResponseDetected {
    sessionId: string;
    response: Message;
}

// üîß –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSONL –∑–∞–ø–∏—Å–∏
export interface ParsedJsonlEntry {
    message?: JsonlEntry;
    serviceInfo?: ServiceMessage;
}

export class JsonlResponseMonitor {
    private watchers: Map<string, fs.FSWatcher> = new Map();
    private lastProcessedEntries: Map<string, number> = new Map();
    private onResponseCallback?: (data: ResponseDetected) => void;
    private onServiceInfoCallback?: (data: ServiceInfoDetected) => void;
    
    // üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private fileContentCache: Map<string, { content: string; mtime: number }> = new Map();
    private throttleTimers: Map<string, NodeJS.Timeout> = new Map();
    private readonly THROTTLE_DELAY = 200; // 200ms –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
    private readonly MAX_CACHE_SIZE = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ —Ñ–∞–π–ª–æ–≤

    constructor(private outputChannel: vscode.OutputChannel) {}

    /**
     * –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
     */
    startMonitoring(sessionId: string, sessionName: string): void {
        // –ö–∞–∂–¥—ã–π —Ä–∞–∑ –∏—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π JSONL —Ñ–∞–π–ª
        const jsonlPath = this.getJsonlPath();
        if (!jsonlPath) {
            this.outputChannel.appendLine(`‚ùå JSONL path not found for session ${sessionId}`);
            return;
        }

        this.outputChannel.appendLine(`üì° Starting JSONL monitoring for session: ${sessionName} (${sessionId})`);
        this.outputChannel.appendLine(`üìÇ Monitoring file: ${jsonlPath}`);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π watcher –µ—Å–ª–∏ –µ—Å—Ç—å
        this.stopMonitoring(sessionId);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º file watcher –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –°–ê–ú–û–ì–û –°–í–ï–ñ–ï–ì–û —Ñ–∞–π–ª–∞
        const watcher = fs.watch(jsonlPath, { persistent: false }, (eventType) => {
            if (eventType === 'change') {
                this.outputChannel.appendLine(`üìÇ JSONL file changed (${eventType}), throttling check...`);
                this.throttledCheckForNewResponses(sessionId, sessionName, jsonlPath);
            }
        });

        this.watchers.set(sessionId, watcher);
        this.lastProcessedEntries.set(sessionId, Date.now());
        
        this.outputChannel.appendLine(`‚úÖ JSONL monitoring started for ${sessionName}`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Å–µ—Å—Å–∏–∏
     */
    stopMonitoring(sessionId: string): void {
        const watcher = this.watchers.get(sessionId);
        if (watcher) {
            watcher.close();
            this.watchers.delete(sessionId);
            this.lastProcessedEntries.delete(sessionId);
            this.outputChannel.appendLine(`üì° JSONL monitoring stopped for session: ${sessionId}`);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
     */
    onResponse(callback: (data: ResponseDetected) => void): void {
        this.onResponseCallback = callback;
    }

    /**
     * üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    onServiceInfo(callback: (data: ServiceInfoDetected) => void): void {
        this.onServiceInfoCallback = callback;
    }

    /**
     * üîß Throttled –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
     */
    private throttledCheckForNewResponses(sessionId: string, sessionName: string, jsonlPath: string): void {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        const existingTimer = this.throttleTimers.get(sessionId);
        if (existingTimer) {
            clearTimeout(existingTimer);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        const timer = setTimeout(() => {
            this.checkForNewResponses(sessionId, sessionName, jsonlPath);
            this.throttleTimers.delete(sessionId);
        }, this.THROTTLE_DELAY);

        this.throttleTimers.set(sessionId, timer);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ JSONL —Ñ–∞–π–ª–µ
     */
    private async checkForNewResponses(sessionId: string, sessionName: string, jsonlPath: string): Promise<void> {
        try {
            if (!fs.existsSync(jsonlPath)) {
                return;
            }

            // üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            const content = await this.getCachedFileContent(jsonlPath);
            if (!content) {
                return; // –§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            }

            const lines = content.trim().split('\n').filter(line => line.trim());

            const lastProcessed = this.lastProcessedEntries.get(sessionId) || 0;
            const newMessages: JsonlEntry[] = [];
            const newServiceInfo: ServiceMessage[] = [];

            for (const line of lines) {
                try {
                    const rawEntry = JSON.parse(line);
                    
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º summary –∑–∞–ø–∏—Å–∏ (–æ–Ω–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ resume —Å–µ—Å—Å–∏–∏)
                    if (this.isSummaryFormat(rawEntry)) {
                        this.outputChannel.appendLine(`üìù Skipping summary entry: ${(rawEntry as SummaryEntry).summary}`);
                        continue;
                    }
                    
                    // –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Claude Code
                    if (this.isClaudeCodeFormat(rawEntry)) {
                        const entryTime = new Date(rawEntry.timestamp).getTime();
                        
                        // –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        if (entryTime > lastProcessed && rawEntry.type === 'assistant') {
                            const parsed = this.parseClaudeCodeEntry(rawEntry as ClaudeCodeJsonlEntry, sessionId);
                            
                            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                            if (parsed.message) {
                                newMessages.push(parsed.message);
                                this.outputChannel.appendLine(`‚úÖ Parsed message: ${parsed.message.content.substring(0, 100)}...`);
                            }
                            
                            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            if (parsed.serviceInfo) {
                                newServiceInfo.push(parsed.serviceInfo);
                                this.outputChannel.appendLine(`üîß Parsed service info: ${parsed.serviceInfo.toolUse.length} tools, ${parsed.serviceInfo.usage.output_tokens} tokens`);
                            }
                        }
                    } 
                    // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    else if (rawEntry.role && rawEntry.content) {
                        const entry = rawEntry as JsonlEntry;
                        const entryTime = entry.timestamp || Date.now();
                        
                        // –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        if (entryTime > lastProcessed && entry.role === 'assistant') {
                            newMessages.push(entry);
                            this.outputChannel.appendLine(`‚úÖ Parsed legacy format entry: ${entry.content.substring(0, 100)}...`);
                        }
                    } else {
                        this.outputChannel.appendLine(`‚ö†Ô∏è Unknown JSONL format: ${JSON.stringify(rawEntry).substring(0, 200)}...`);
                    }
                } catch (parseError) {
                    this.outputChannel.appendLine(`‚ùå JSON parse error: ${parseError}`);
                    continue;
                }
            }

            // üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç assistant
            for (const entry of newMessages) {
                const responseMessage: Message = {
                    id: this.generateMessageId(),
                    content: entry.content,
                    timestamp: new Date(entry.timestamp || Date.now()),
                    type: 'assistant',
                    sessionId
                };

                this.outputChannel.appendLine(`üì® New response detected for ${sessionName}: ${entry.content.substring(0, 100)}...`);

                if (this.onResponseCallback) {
                    this.onResponseCallback({
                        sessionId,
                        response: responseMessage
                    });
                }
            }

            // üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            for (const serviceInfo of newServiceInfo) {
                this.outputChannel.appendLine(`üîß New service info detected for ${sessionName}: ${serviceInfo.toolUse.length} tools, status: ${serviceInfo.status}`);

                if (this.onServiceInfoCallback) {
                    this.onServiceInfoCallback({
                        sessionId,
                        serviceInfo
                    });
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (newMessages.length > 0 || newServiceInfo.length > 0) {
                this.lastProcessedEntries.set(sessionId, Date.now());
            }

        } catch (error) {
            this.outputChannel.appendLine(`‚ùå Error checking JSONL responses: ${error}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ JSONL —Ñ–∞–π–ª—É Claude Code (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫)
     */
    private getJsonlPath(): string | null {
        const claudeDir = path.join(os.homedir(), '.claude', 'projects');
        if (!fs.existsSync(claudeDir)) {
            this.outputChannel.appendLine(`‚ùå Claude projects directory not found: ${claudeDir}`);
            return null;
        }

        try {
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ JSONL —Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö
            const allFiles: Array<{name: string, path: string, mtime: Date}> = [];
            
            const searchDir = (dir: string) => {
                const items = fs.readdirSync(dir);
                for (const item of items) {
                    const fullPath = path.join(dir, item);
                    const stat = fs.statSync(fullPath);
                    
                    if (stat.isDirectory()) {
                        searchDir(fullPath); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                    } else if (item.endsWith('.jsonl')) {
                        allFiles.push({
                            name: item,
                            path: fullPath,
                            mtime: stat.mtime
                        });
                    }
                }
            };

            searchDir(claudeDir);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –ø–µ—Ä–≤—ã–π)
            allFiles.sort((a, b) => b.mtime.getTime() - a.mtime.getTime());
            
            if (allFiles.length > 0) {
                this.outputChannel.appendLine(`‚úÖ Found JSONL file: ${allFiles[0].path}`);
                return allFiles[0].path;
            } else {
                this.outputChannel.appendLine(`‚ùå No JSONL files found in ${claudeDir}`);
                return null;
            }
        } catch (error) {
            this.outputChannel.appendLine(`‚ùå Error searching for JSONL files: ${error}`);
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º Claude Code
     */
    private isClaudeCodeFormat(entry: any): boolean {
        return entry.type && (entry.type === 'assistant' || entry.type === 'user') && 
               entry.timestamp && entry.message;
    }

    /**
     * üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å summary —Ñ–æ—Ä–º–∞—Ç–æ–º (–ø—Ä–∏ resume —Å–µ—Å—Å–∏–∏)
     */
    private isSummaryFormat(entry: any): boolean {
        return entry.type === 'summary' && entry.summary && typeof entry.summary === 'string';
    }

    /**
     * üîß –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Claude Code –≤ –¥–≤–∞ –ø–æ—Ç–æ–∫–∞: message + serviceInfo
     */
    private parseClaudeCodeEntry(entry: ClaudeCodeJsonlEntry, sessionId: string): ParsedJsonlEntry {
        if (!entry.message || entry.type !== 'assistant') {
            return {};
        }

        const result: ParsedJsonlEntry = {};
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º content - –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
        if (Array.isArray(entry.message.content)) {
            // üîß –ü–û–¢–û–ö 1: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const textContent = entry.message.content
                .filter(item => item.type === 'text' && item.text)
                .map(item => item.text!)
                .join('\n');
            
            if (textContent.trim()) {
                result.message = {
                    role: 'assistant',
                    content: textContent,
                    timestamp: new Date(entry.timestamp).getTime()
                };
            }
            
            // üîß –ü–û–¢–û–ö 2: –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const serviceInfo = this.extractServiceInfo(entry, sessionId);
            if (serviceInfo) {
                result.serviceInfo = serviceInfo;
            }
            
        } else if (typeof entry.message.content === 'string') {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: content - —Å—Ç—Ä–æ–∫–∞
            result.message = {
                role: 'assistant',
                content: entry.message.content,
                timestamp: new Date(entry.timestamp).getTime()
            };
        }

        return result;
    }

    /**
     * üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ JSONL –∑–∞–ø–∏—Å–∏
     */
    private extractServiceInfo(entry: ClaudeCodeJsonlEntry, sessionId: string): ServiceMessage | null {
        try {
            if (!entry.message || !Array.isArray(entry.message.content)) {
                return null;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º tool_use –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            const toolUseItems: ToolUseItem[] = entry.message.content
                .filter(item => item.type === 'tool_use')
                .map(item => {
                    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if (!item.name) {
                        this.outputChannel.appendLine(`‚ö†Ô∏è Tool use without name: ${JSON.stringify(item)}`);
                        return null;
                    }
                    
                    return {
                        id: item.id || this.generateId(),
                        name: item.name,
                        input: this.sanitizeInput(item.input),
                        status: 'running' as const,
                        duration: undefined,
                        result: undefined,
                        error: undefined
                    };
                })
                .filter(item => item !== null) as ToolUseItem[];

            // –ò–∑–≤–ª–µ–∫–∞–µ–º thinking –ø—Ä–æ—Ü–µ—Å—Å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            const thinkingContent = entry.message.content
                .filter(item => item.type === 'thinking' && item.text && typeof item.text === 'string')
                .map(item => item.text!)
                .join('\n')
                .trim();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º usage –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ = cache_creation + cache_read
            const cacheCreationTokens = this.validateTokenCount(entry.message.usage?.cache_creation_input_tokens);
            const cacheReadTokens = this.validateTokenCount(entry.message.usage?.cache_read_input_tokens);
            const totalContextTokens = cacheCreationTokens + cacheReadTokens;

            const usage: UsageInfo = {
                input_tokens: this.validateTokenCount(entry.message.usage?.input_tokens),
                output_tokens: this.validateTokenCount(entry.message.usage?.output_tokens),
                cache_creation_input_tokens: cacheCreationTokens,
                cache_read_input_tokens: totalContextTokens, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç!
                service_tier: this.validateServiceTier(entry.message.usage?.service_tier)
            };

            // –°–æ–∑–¥–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å
            // üîß –í–ê–ñ–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å cache_read_input_tokens = 0 (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
            if ((toolUseItems.length > 0 || thinkingContent || usage.output_tokens > 0) && (usage.cache_read_input_tokens || 0) > 0) {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ stop_reason –ò –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                const status = this.determineStatusFromStopReasonAndTools(entry, toolUseItems);
                
                return {
                    id: this.generateId(),
                    type: 'service',
                    sessionId: sessionId,
                    timestamp: new Date(entry.timestamp),
                    toolUse: toolUseItems,
                    thinking: thinkingContent,
                    usage: usage,
                    status: status
                };
            }

            return null;
        } catch (error) {
            this.outputChannel.appendLine(`‚ùå Error extracting service info: ${error}`);
            return null;
        }
    }

    /**
     * üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è tool_use
     */
    private sanitizeInput(input: any): any {
        if (!input) {return {};}
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (typeof input === 'string') {
                return { raw: input.substring(0, 1000) }; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            }
            
            if (typeof input === 'object') {
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ–º –æ–±—ä–µ–∫—Ç
                const sanitized: any = {};
                for (const [key, value] of Object.entries(input)) {
                    if (typeof value === 'string') {
                        sanitized[key] = value.substring(0, 1000);
                    } else if (typeof value === 'number' || typeof value === 'boolean') {
                        sanitized[key] = value;
                    } else if (Array.isArray(value)) {
                        sanitized[key] = value.slice(0, 100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã
                    } else {
                        sanitized[key] = String(value).substring(0, 500);
                    }
                }
                return sanitized;
            }
            
            return input;
        } catch (error) {
            this.outputChannel.appendLine(`‚ö†Ô∏è Error sanitizing input: ${error}`);
            return { error: 'Failed to sanitize input' };
        }
    }

    /**
     * üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
     */
    private validateTokenCount(count: number | undefined): number {
        if (count === undefined || count === null) {return 0;}
        if (typeof count !== 'number') {return 0;}
        if (count < 0) {return 0;}
        if (count > 1000000) {return 1000000;} // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return Math.floor(count);
    }

    /**
     * üîß –í–∞–ª–∏–¥–∞—Ü–∏—è service tier
     */
    private validateServiceTier(tier: string | undefined): string | undefined {
        if (!tier || typeof tier !== 'string') {return undefined;}
        
        const validTiers = ['standard', 'premium', 'enterprise'];
        if (validTiers.includes(tier.toLowerCase())) {
            return tier.toLowerCase();
        }
        
        return undefined;
    }


    /**
     * üîß –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: –¢–û–õ–¨–ö–û completed –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–°–ï–ì–î–ê processing, completed –¢–û–õ–¨–ö–û –ø—Ä–∏ stop_reason: "end_turn"
     */
    private determineStatusFromStopReasonAndTools(
        entry: ClaudeCodeJsonlEntry, 
        toolUseItems: ToolUseItem[]
    ): 'processing' | 'completed' | 'initializing' {
        const stopReason = entry.message?.stop_reason;
        
        // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.outputChannel.appendLine(`üîç DEBUG: stop_reason value: "${stopReason}" (type: ${typeof stopReason})`);
        this.outputChannel.appendLine(`üîç DEBUG: tools count: ${toolUseItems.length}`);
        this.outputChannel.appendLine(`üîç DEBUG: stop_reason === "end_turn": ${stopReason === "end_turn"}`);
        this.outputChannel.appendLine(`üîç DEBUG: stop_reason === null: ${stopReason === null}`);
        
        // –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: completed –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∂–¥—ë—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã stop_reason –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const isWaitingForUser = (
            stopReason === "end_turn" || 
            stopReason === null || 
            stopReason === "stop_sequence"
        ) && toolUseItems.length === 0;
        
        if (isWaitingForUser) {
            this.outputChannel.appendLine(`üîß Status: COMPLETED (waiting for user, stop_reason: ${stopReason}, no tools)`);
            return 'completed';
        }
        
        // –í–û –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• –°–õ–£–ß–ê–Ø–• - processing
        this.outputChannel.appendLine(`üîß Status: PROCESSING (stop_reason: ${stopReason}, tools: ${toolUseItems.length})`);
        return 'processing';
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private generateMessageId(): string {
        return `msg_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
    }

    /**
     * üîß –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    private generateId(): string {
        return `id_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
    }

    /**
     * üîß –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     */
    private async getCachedFileContent(filePath: string): Promise<string | null> {
        try {
            const stats = await fs.promises.stat(filePath);
            const mtime = stats.mtime.getTime();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cached = this.fileContentCache.get(filePath);
            if (cached && cached.mtime === mtime) {
                return cached.content; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            }
            
            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            const content = await fs.promises.readFile(filePath, 'utf-8');
            
            // –£–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–æ–º –∫—ç—à–∞
            if (this.fileContentCache.size >= this.MAX_CACHE_SIZE) {
                // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
                const firstKey = this.fileContentCache.keys().next().value;
                if (firstKey) {
                    this.fileContentCache.delete(firstKey);
                }
            }
            
            // –ö—ç—à–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            this.fileContentCache.set(filePath, { content, mtime });
            
            return content;
        } catch (error) {
            this.outputChannel.appendLine(`‚ö†Ô∏è Error caching file content: ${error}`);
            // Fallback: —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
            try {
                return await fs.promises.readFile(filePath, 'utf-8');
            } catch (fallbackError) {
                this.outputChannel.appendLine(`‚ùå Fallback file read failed: ${fallbackError}`);
                return null;
            }
        }
    }

    /**
     * üöÄ –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è JSONL –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
     */
    async initializeSessionTokens(sessionId: string, sessionName: string): Promise<void> {
        try {
            // –ü–æ–∏—Å–∫ JSONL —Ñ–∞–π–ª–∞ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –º–µ—Ç–æ–¥–∞ findJsonlPath)
            const claudeDir = path.join(os.homedir(), '.claude');
            if (!fs.existsSync(claudeDir)) {
                this.outputChannel.appendLine(`üîç Claude directory not found - tokens will be initialized after first response`);
                return;
            }

            const allFiles: Array<{ name: string; path: string; mtime: Date }> = [];
            
            const searchDir = (dir: string) => {
                const items = fs.readdirSync(dir);
                for (const item of items) {
                    const fullPath = path.join(dir, item);
                    const stat = fs.statSync(fullPath);
                    
                    if (stat.isDirectory()) {
                        searchDir(fullPath); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                    } else if (item.endsWith('.jsonl')) {
                        allFiles.push({
                            name: item,
                            path: fullPath,
                            mtime: stat.mtime
                        });
                    }
                }
            };

            searchDir(claudeDir);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –ø–µ—Ä–≤—ã–π)
            allFiles.sort((a, b) => b.mtime.getTime() - a.mtime.getTime());
            
            let jsonlPath: string | null = null;
            if (allFiles.length > 0) {
                jsonlPath = allFiles[0].path;
            }

            if (!jsonlPath || !fs.existsSync(jsonlPath)) {
                this.outputChannel.appendLine(`üîç No JSONL file found for session ${sessionId} (${sessionName}) - tokens will be initialized after first response`);
                return;
            }

            this.outputChannel.appendLine(`üöÄ Proactively reading JSONL for session ${sessionId}: ${jsonlPath}`);

            const content = await this.getCachedFileContent(jsonlPath);
            if (!content) {
                return;
            }

            const lines = content.trim().split('\n').filter(line => line.trim());
            if (lines.length === 0) {
                return;
            }

            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å assistant —Å —Ç–æ–∫–µ–Ω–∞–º–∏
            let latestServiceInfo: ServiceMessage | null = null;
            
            for (let i = lines.length - 1; i >= 0; i--) {
                try {
                    const rawEntry = JSON.parse(lines[i]);
                    
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º summary –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    if (this.isSummaryFormat(rawEntry)) {
                        continue;
                    }
                    
                    if (this.isClaudeCodeFormat(rawEntry) && rawEntry.type === 'assistant') {
                        const parsed = this.parseClaudeCodeEntry(rawEntry as ClaudeCodeJsonlEntry, sessionId);
                        
                        if (parsed.serviceInfo) {
                            latestServiceInfo = parsed.serviceInfo;
                            break; // –ù–∞—à–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å —Å —Ç–æ–∫–µ–Ω–∞–º–∏
                        }
                    }
                } catch (parseError) {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                }
            }

            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º processing
            if (latestServiceInfo) {
                this.outputChannel.appendLine(`‚úÖ Initialized tokens for session ${sessionId}: ${latestServiceInfo.usage.cache_read_input_tokens || 0} cache tokens`);
                
                // üîß –í–ê–ñ–ù–û: –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –í–°–ï–ì–î–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º processing, 
                // —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
                const processingServiceInfo: ServiceMessage = {
                    ...latestServiceInfo,
                    status: 'processing',
                    timestamp: new Date() // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                };
                
                if (this.onServiceInfoCallback) {
                    this.onServiceInfoCallback({
                        sessionId,
                        serviceInfo: processingServiceInfo
                    });
                }
            }

        } catch (error) {
            this.outputChannel.appendLine(`‚ùå Error initializing session tokens: ${error}`);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose(): void {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        for (const [, timer] of this.throttleTimers) {
            clearTimeout(timer);
        }
        this.throttleTimers.clear();
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        this.fileContentCache.clear();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        for (const [sessionId] of this.watchers) {
            this.stopMonitoring(sessionId);
        }
    }
}