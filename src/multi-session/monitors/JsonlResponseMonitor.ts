/**
 * JSONL Response Monitor - –ü–û–¢–û–ö 2: Terminal ‚Üí Extension
 * –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç Claude Code —á–µ—Ä–µ–∑ JSONL —Ñ–∞–π–ª—ã
 * –†–∞–∑–º–µ—Ä: <200 —Å—Ç—Ä–æ–∫
 */

import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import { Message } from '../types/Session';

// –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Claude Code JSONL
export interface ClaudeCodeJsonlEntry {
    type: 'user' | 'assistant';
    message?: {
        role: 'user' | 'assistant';
        content: Array<{
            type: 'text';
            text: string;
        }> | string;
    };
    timestamp: string;
    sessionId?: string;
}

// –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export interface JsonlEntry {
    role: 'user' | 'assistant';
    content: string;
    timestamp?: number;
}

export interface ResponseDetected {
    sessionId: string;
    response: Message;
}

export class JsonlResponseMonitor {
    private watchers: Map<string, fs.FSWatcher> = new Map();
    private lastProcessedEntries: Map<string, number> = new Map();
    private onResponseCallback?: (data: ResponseDetected) => void;

    constructor(private outputChannel: vscode.OutputChannel) {}

    /**
     * –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
     */
    startMonitoring(sessionId: string, sessionName: string): void {
        // –ö–∞–∂–¥—ã–π —Ä–∞–∑ –∏—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π JSONL —Ñ–∞–π–ª
        const jsonlPath = this.getJsonlPath();
        if (!jsonlPath) {
            this.outputChannel.appendLine(`‚ùå JSONL path not found for session ${sessionId}`);
            return;
        }

        this.outputChannel.appendLine(`üì° Starting JSONL monitoring for session: ${sessionName} (${sessionId})`);
        this.outputChannel.appendLine(`üìÇ Monitoring file: ${jsonlPath}`);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π watcher –µ—Å–ª–∏ –µ—Å—Ç—å
        this.stopMonitoring(sessionId);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º file watcher –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –°–ê–ú–û–ì–û –°–í–ï–ñ–ï–ì–û —Ñ–∞–π–ª–∞
        const watcher = fs.watch(jsonlPath, { persistent: false }, (eventType) => {
            if (eventType === 'change') {
                this.outputChannel.appendLine(`üìÇ JSONL file changed (${eventType}), checking for new responses...`);
                this.checkForNewResponses(sessionId, sessionName, jsonlPath);
            }
        });

        this.watchers.set(sessionId, watcher);
        this.lastProcessedEntries.set(sessionId, Date.now());
        
        this.outputChannel.appendLine(`‚úÖ JSONL monitoring started for ${sessionName}`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Å–µ—Å—Å–∏–∏
     */
    stopMonitoring(sessionId: string): void {
        const watcher = this.watchers.get(sessionId);
        if (watcher) {
            watcher.close();
            this.watchers.delete(sessionId);
            this.lastProcessedEntries.delete(sessionId);
            this.outputChannel.appendLine(`üì° JSONL monitoring stopped for session: ${sessionId}`);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
     */
    onResponse(callback: (data: ResponseDetected) => void): void {
        this.onResponseCallback = callback;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ JSONL —Ñ–∞–π–ª–µ
     */
    private async checkForNewResponses(sessionId: string, sessionName: string, jsonlPath: string): Promise<void> {
        try {
            if (!fs.existsSync(jsonlPath)) {
                return;
            }

            const content = await fs.promises.readFile(jsonlPath, 'utf-8');
            const lines = content.trim().split('\n').filter(line => line.trim());

            const lastProcessed = this.lastProcessedEntries.get(sessionId) || 0;
            const newEntries: JsonlEntry[] = [];

            for (const line of lines) {
                try {
                    const rawEntry = JSON.parse(line);
                    
                    // –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Claude Code
                    if (this.isClaudeCodeFormat(rawEntry)) {
                        const entry = this.parseClaudeCodeEntry(rawEntry as ClaudeCodeJsonlEntry);
                        if (entry) {
                            const entryTime = new Date(rawEntry.timestamp).getTime();
                            
                            // –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            if (entryTime > lastProcessed && entry.role === 'assistant') {
                                newEntries.push(entry);
                                this.outputChannel.appendLine(`‚úÖ Parsed Claude Code format entry: ${entry.content.substring(0, 100)}...`);
                            }
                        }
                    } 
                    // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    else if (rawEntry.role && rawEntry.content) {
                        const entry = rawEntry as JsonlEntry;
                        const entryTime = entry.timestamp || Date.now();
                        
                        // –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        if (entryTime > lastProcessed && entry.role === 'assistant') {
                            newEntries.push(entry);
                            this.outputChannel.appendLine(`‚úÖ Parsed legacy format entry: ${entry.content.substring(0, 100)}...`);
                        }
                    } else {
                        this.outputChannel.appendLine(`‚ö†Ô∏è Unknown JSONL format: ${JSON.stringify(rawEntry).substring(0, 200)}...`);
                    }
                } catch (parseError) {
                    this.outputChannel.appendLine(`‚ùå JSON parse error: ${parseError}`);
                    continue;
                }
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç assistant
            for (const entry of newEntries) {
                const responseMessage: Message = {
                    id: this.generateMessageId(),
                    content: entry.content,
                    timestamp: new Date(entry.timestamp || Date.now()),
                    type: 'assistant',
                    sessionId
                };

                this.outputChannel.appendLine(`üì® New response detected for ${sessionName}: ${entry.content.substring(0, 100)}...`);

                if (this.onResponseCallback) {
                    this.onResponseCallback({
                        sessionId,
                        response: responseMessage
                    });
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (newEntries.length > 0) {
                this.lastProcessedEntries.set(sessionId, Date.now());
            }

        } catch (error) {
            this.outputChannel.appendLine(`‚ùå Error checking JSONL responses: ${error}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ JSONL —Ñ–∞–π–ª—É Claude Code (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫)
     */
    private getJsonlPath(): string | null {
        const claudeDir = path.join(os.homedir(), '.claude', 'projects');
        if (!fs.existsSync(claudeDir)) {
            this.outputChannel.appendLine(`‚ùå Claude projects directory not found: ${claudeDir}`);
            return null;
        }

        try {
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ JSONL —Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö
            const allFiles: Array<{name: string, path: string, mtime: Date}> = [];
            
            const searchDir = (dir: string) => {
                const items = fs.readdirSync(dir);
                for (const item of items) {
                    const fullPath = path.join(dir, item);
                    const stat = fs.statSync(fullPath);
                    
                    if (stat.isDirectory()) {
                        searchDir(fullPath); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                    } else if (item.endsWith('.jsonl')) {
                        allFiles.push({
                            name: item,
                            path: fullPath,
                            mtime: stat.mtime
                        });
                    }
                }
            };

            searchDir(claudeDir);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –ø–µ—Ä–≤—ã–π)
            allFiles.sort((a, b) => b.mtime.getTime() - a.mtime.getTime());
            
            if (allFiles.length > 0) {
                this.outputChannel.appendLine(`‚úÖ Found JSONL file: ${allFiles[0].path}`);
                return allFiles[0].path;
            } else {
                this.outputChannel.appendLine(`‚ùå No JSONL files found in ${claudeDir}`);
                return null;
            }
        } catch (error) {
            this.outputChannel.appendLine(`‚ùå Error searching for JSONL files: ${error}`);
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º Claude Code
     */
    private isClaudeCodeFormat(entry: any): boolean {
        return entry.type && (entry.type === 'assistant' || entry.type === 'user') && 
               entry.timestamp && entry.message;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Claude Code –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
     */
    private parseClaudeCodeEntry(entry: ClaudeCodeJsonlEntry): JsonlEntry | null {
        if (!entry.message || entry.type !== 'assistant') {
            return null;
        }

        let content: string = '';
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º content - –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
        if (Array.isArray(entry.message.content)) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: content - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            const textContent = entry.message.content
                .filter(item => item.type === 'text')
                .map(item => item.text)
                .join('\n');
            content = textContent;
        } else if (typeof entry.message.content === 'string') {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: content - —Å—Ç—Ä–æ–∫–∞
            content = entry.message.content;
        }

        if (!content) {
            return null;
        }

        return {
            role: 'assistant',
            content: content,
            timestamp: new Date(entry.timestamp).getTime()
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private generateMessageId(): string {
        return `msg_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose(): void {
        for (const [sessionId] of this.watchers) {
            this.stopMonitoring(sessionId);
        }
    }
}