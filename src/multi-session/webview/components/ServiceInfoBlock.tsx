/**
 * üé® ServiceInfoBlock - –ñ–∏–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, thinking –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

import React, { useEffect } from 'react';
import { ServiceMessage, ToolUseItem } from '../../types/Session';
import './ServiceInfoBlock.css';

export interface ServiceInfoBlockProps {
  serviceInfo: ServiceMessage;
  onUpdate?: (updated: ServiceMessage) => void;
}

export const ServiceInfoBlock: React.FC<ServiceInfoBlockProps> = ({ 
  serviceInfo, 
  onUpdate
}) => {
  // üé® –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  useEffect(() => {
    console.log('üé® ServiceInfoBlock received new data:', {
      status: serviceInfo.status,
      toolsCount: serviceInfo.toolUse.length,
      timestamp: serviceInfo.timestamp,
      activeTools: serviceInfo.toolUse.filter(tool => tool.status === 'running' || tool.status === 'pending').length,
      completedTools: serviceInfo.toolUse.filter(tool => tool.status === 'completed').length
    });
  }, [serviceInfo]);





  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusClass = () => {
    switch (serviceInfo.status) {
      case 'initializing':
        return 'status-initializing';
      case 'processing':
        return 'status-processing';
      case 'completed':
        return 'status-completed';
      case 'error':
        return 'status-error';
      default:
        return 'status-processing';
    }
  };



  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const getActiveTools = (): ToolUseItem[] => {
    return serviceInfo.toolUse.filter(tool => 
      tool.status === 'running' || tool.status === 'pending'
    );
  };

  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const getCompletedTools = (): ToolUseItem[] => {
    return serviceInfo.toolUse.filter(tool => 
      tool.status === 'completed'
    );
  };


  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
  const getCurrentTool = (): string => {
    const activeTools = getActiveTools();
    const completedTools = getCompletedTools();
    
    if (activeTools.length > 0) {
      return activeTools[activeTools.length - 1].name;
    } else if (completedTools.length > 0) {
      return completedTools[completedTools.length - 1].name;
    }
    return 'Processing';
  };

  // üé® –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–∞
  return (
    <div className={`service-info-compact ${getStatusClass()}`}>
      <div className="compact-status-bar">
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ */}
        <span className="tool-name">
          {getCurrentTool()}
        </span>
        
        {/* –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç */}
        <span className={`status-text ${getStatusClass()}`}>
          {serviceInfo.status}
        </span>
      </div>
    </div>
  );
};