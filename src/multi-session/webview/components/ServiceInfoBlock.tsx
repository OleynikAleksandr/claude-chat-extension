/**
 * ServiceInfoBlock - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –Ω–∏–∂–Ω–µ–º –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–µ
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ JSON –æ—Ç–≤–µ—Ç–æ–≤ Claude
 */

import React, { useMemo } from 'react';
import { ServiceMessage } from '../../types/Session';
import './ServiceInfoBlock.css';

export interface ServiceInfoBlockProps {
  serviceInfo: ServiceMessage;
  onUpdate?: (updated: ServiceMessage) => void;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø—É—Ç–µ–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
const truncatePath = (path: string, maxLength: number = 40): string => {
  if (!path || path.length <= maxLength) return path;
  
  const lastSlash = path.lastIndexOf('/');
  if (lastSlash === -1) return path;
  
  const fileName = path.substring(lastSlash + 1);
  const directory = path.substring(0, lastSlash);
  
  // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Å–æ–∫—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (fileName.length > maxLength - 10) {
    return `.../${fileName.substring(0, maxLength - 13)}...`;
  }
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const availableSpace = maxLength - fileName.length - 4; // 4 –¥–ª—è ".../"
  
  if (directory.length <= availableSpace) {
    return path;
  }
  
  // –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
  return `.../${fileName}`;
};

export const ServiceInfoBlock: React.FC<ServiceInfoBlockProps> = ({ 
  serviceInfo, 
  onUpdate
}) => {
  // –ü–∞—Ä—Å–∏–Ω–≥ raw JSON –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const statusText = useMemo(() => {
    const rawJson = serviceInfo.rawJson;
    
    if (!rawJson) {
      return 'Assistant Processing';
    }

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º type: result -> Assistant Ready For Next Task
    if (rawJson.type === 'result') {
      console.log('‚úÖ Found type: result, showing Ready status');
      return 'Assistant Ready For Next Task';
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º type: assistant —Å tool_use
    if (rawJson.type === 'assistant' && rawJson.message?.content) {
      const content = rawJson.message.content;
      
      // –ò—â–µ–º tool_use –≤ content array
      for (const item of content) {
        if (item.type === 'tool_use' && item.name && item.name !== 'TodoWrite') {
          // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
          const toolName = item.name;
          
          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ file_path –≤ input
          let filePath = '';
          if (item.input && item.input.file_path) {
            filePath = truncatePath(item.input.file_path, 35);
          } else if (item.input && item.input.path) {
            filePath = truncatePath(item.input.path, 35);
          }
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
          return filePath ? `${toolName}: ${filePath}` : toolName;
        }
      }
    }

    // 3. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
    console.log('üîç Default case, returning Processing');
    return 'Assistant Processing';
  }, [serviceInfo.rawJson]);
  
  console.log('üéØ Final statusText:', statusText);

  return (
    <div className="service-info-compact">
      <div className="compact-status-bar">
        <span className="status-text">
          {statusText}
        </span>
      </div>
    </div>
  );
};