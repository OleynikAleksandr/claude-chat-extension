/**
 * üé® ServiceInfoBlock - –ñ–∏–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, thinking –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

import React, { useEffect } from 'react';
import { ServiceMessage, ToolUseItem } from '../../types/Session';
import './ServiceInfoBlock.css';

export interface ServiceInfoBlockProps {
  serviceInfo: ServiceMessage;
  onUpdate?: (updated: ServiceMessage) => void;
  currentTool?: { name: string; params: string };
}

// üé® –§—É–Ω–∫—Ü–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø—É—Ç–µ–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
const truncatePath = (path: string, maxLength: number = 40): string => {
  if (path.length <= maxLength) return path;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É
  const lastSlash = path.lastIndexOf('/');
  if (lastSlash === -1) return path; // –ù–µ –ø—É—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  
  const fileName = path.substring(lastSlash + 1);
  const directory = path.substring(0, lastSlash);
  
  // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Å–æ–∫—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (fileName.length > maxLength - 10) {
    return `.../${fileName.substring(0, maxLength - 13)}...`;
  }
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const availableSpace = maxLength - fileName.length - 4; // 4 –¥–ª—è ".../"
  
  if (directory.length <= availableSpace) {
    return path; // –ü—É—Ç—å –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
  }
  
  // –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
  const truncatedDir = directory.substring(directory.length - availableSpace);
  const firstSlash = truncatedDir.indexOf('/');
  
  if (firstSlash > 0) {
    return `.../${truncatedDir.substring(firstSlash + 1)}/${fileName}`;
  }
  
  return `.../${fileName}`;
};

export const ServiceInfoBlock: React.FC<ServiceInfoBlockProps> = ({ 
  serviceInfo, 
  onUpdate,
  currentTool
}) => {
  // üé® –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  useEffect(() => {
    console.log('üé® ServiceInfoBlock received new data:', {
      status: serviceInfo.status,
      toolsCount: serviceInfo.toolUse.length,
      timestamp: serviceInfo.timestamp,
      activeTools: serviceInfo.toolUse.filter(tool => tool.status === 'running' || tool.status === 'pending').length,
      completedTools: serviceInfo.toolUse.filter(tool => tool.status === 'completed').length
    });
  }, [serviceInfo]);





  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusClass = () => {
    switch (serviceInfo.status) {
      case 'initializing':
        return 'status-initializing';
      case 'processing':
        return 'status-processing';
      case 'completed':
        return 'status-completed';
      case 'error':
        return 'status-error';
      default:
        return 'status-processing';
    }
  };



  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const getActiveTools = (): ToolUseItem[] => {
    return serviceInfo.toolUse.filter(tool => 
      tool.status === 'running' || tool.status === 'pending'
    );
  };

  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const getCompletedTools = (): ToolUseItem[] => {
    return serviceInfo.toolUse.filter(tool => 
      tool.status === 'completed'
    );
  };


  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const getCurrentToolDisplay = (): string => {
    // –ü–†–ò–û–†–ò–¢–ï–¢: –ï—Å–ª–∏ –µ—Å—Ç—å currentTool - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (currentTool) {
      console.log('üé® ServiceInfoBlock displaying currentTool:', currentTool);
      return currentTool.params ? 
        `${currentTool.name}: ${truncatePath(currentTool.params, 35)}` : 
        currentTool.name;
    }
    
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å processing - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑ serviceInfo
    if (serviceInfo.status === 'processing') {
      // –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞
      if (serviceInfo.toolUse.length > 0) {
        return serviceInfo.toolUse[serviceInfo.toolUse.length - 1].name;
      }
      return 'Processing';
    }
    
    // –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Assistant
    return 'Assistant';
  };

  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getDisplayStatus = (): string => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π currentTool - –≤—Å–µ–≥–¥–∞ Processing
    if (currentTool) {
      console.log('üé® ServiceInfoBlock status: Processing (currentTool active)');
      return 'Processing';
    }
    
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å completed –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
    if (serviceInfo.status === 'completed') {
      console.log('üé® ServiceInfoBlock status: Ready for next task (no active tools)');
      return 'Ready for next task';
    }
    
    if (serviceInfo.status === 'processing') {
      return 'Processing';
    }
    return serviceInfo.status;
  };

  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusDisplayClass = (): string => {
    if (serviceInfo.status === 'completed') {
      return 'status-ready';
    }
    return getStatusClass();
  };

  // üé® –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–∞
  return (
    <div className={`service-info-compact ${getStatusClass()}`}>
      <div className="compact-status-bar">
        {/* –¢–æ—á–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è) */}
        <div className={`status-dot ${serviceInfo.status === 'processing' ? 'active' : 'idle'}`}></div>
        
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ */}
        <span className="tool-name">
          {getCurrentToolDisplay()}
        </span>
        
        {/* –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç */}
        <span className={`status-text ${getStatusDisplayClass()}`}>
          {getDisplayStatus()}
        </span>
      </div>
    </div>
  );
};