/**
 * üé® ServiceInfoBlock - –ñ–∏–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, thinking –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

import React, { useEffect, useState, useRef } from 'react';
import { ServiceMessage, ToolUseItem } from '../../types/Session';
import './ServiceInfoBlock.css';

export interface ServiceInfoBlockProps {
  serviceInfo: ServiceMessage;
  onUpdate?: (updated: ServiceMessage) => void;
  isCompact?: boolean;
}

export const ServiceInfoBlock: React.FC<ServiceInfoBlockProps> = ({ 
  serviceInfo, 
  onUpdate,
  isCompact = false 
}) => {
  const [animatedTokens, setAnimatedTokens] = useState(serviceInfo.usage.output_tokens);
  const [elapsedTime, setElapsedTime] = useState(0);
  const [isExpanded, setIsExpanded] = useState(!isCompact);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const animationRef = useRef<number | null>(null);

  // üé® –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
  useEffect(() => {
    if (serviceInfo.usage.output_tokens !== animatedTokens) {
      const startTokens = animatedTokens;
      const endTokens = serviceInfo.usage.output_tokens;
      const duration = 800; // 0.8 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      
      const startTime = Date.now();
      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Easing —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        const easeOutQuart = 1 - Math.pow(1 - progress, 4);
        
        const currentTokens = Math.floor(
          startTokens + (endTokens - startTokens) * easeOutQuart
        );
        
        setAnimatedTokens(currentTokens);
        
        if (progress < 1) {
          animationRef.current = requestAnimationFrame(animate);
        }
      };
      
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      animationRef.current = requestAnimationFrame(animate);
    }
  }, [serviceInfo.usage.output_tokens, animatedTokens]);

  // üé® –¢–∞–π–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (serviceInfo.status === 'processing' || serviceInfo.status === 'initializing') {
      intervalRef.current = setInterval(() => {
        setElapsedTime(
          (Date.now() - serviceInfo.timestamp.getTime()) / 1000
        );
      }, 100); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100ms –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      
      return () => {
        if (intervalRef.current) {
          clearInterval(intervalRef.current);
        }
      };
    } else if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }
  }, [serviceInfo.status, serviceInfo.timestamp]);

  // üé® Cleanup –ø—Ä–∏ unmount
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, []);

  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusIcon = () => {
    switch (serviceInfo.status) {
      case 'initializing':
        return '‚ö°';
      case 'processing':
        return '‚ö°';
      case 'completed':
        return '‚úÖ';
      case 'error':
        return '‚ùå';
      default:
        return '‚ö°';
    }
  };

  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusClass = () => {
    switch (serviceInfo.status) {
      case 'initializing':
        return 'status-initializing';
      case 'processing':
        return 'status-processing';
      case 'completed':
        return 'status-completed';
      case 'error':
        return 'status-error';
      default:
        return 'status-processing';
    }
  };

  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusText = () => {
    switch (serviceInfo.status) {
      case 'initializing':
        return 'INITIALIZING';
      case 'processing':
        return 'PROCESSING';
      case 'completed':
        return 'COMPLETED';
      case 'error':
        return 'ERROR';
      default:
        return 'PROCESSING';
    }
  };

  // üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (seconds: number): string => {
    if (seconds < 60) {
      return `${seconds.toFixed(1)}s`;
    } else {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;
      return `${minutes}m ${remainingSeconds.toFixed(1)}s`;
    }
  };

  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const getActiveTools = (): ToolUseItem[] => {
    return serviceInfo.toolUse.filter(tool => 
      tool.status === 'running' || tool.status === 'pending'
    );
  };

  // üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const getCompletedTools = (): ToolUseItem[] => {
    return serviceInfo.toolUse.filter(tool => 
      tool.status === 'completed'
    );
  };

  // üé® Compact —Ä–µ–∂–∏–º
  if (isCompact && !isExpanded) {
    return (
      <div 
        className={`service-info-block compact ${getStatusClass()}`}
        onClick={() => setIsExpanded(true)}
        role="button"
        tabIndex={0}
        onKeyDown={(e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            setIsExpanded(true);
          }
        }}
        aria-label="Expand service information"
      >
        <div className="compact-content">
          <span className="status-icon">{getStatusIcon()}</span>
          <span className="tokens-compact">{animatedTokens}</span>
          <span className="time-compact">{formatTime(elapsedTime)}</span>
          {getActiveTools().length > 0 && (
            <span className="tools-compact">
              {getActiveTools().map(tool => tool.name).join(', ')}
            </span>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className={`service-info-block ${getStatusClass()}`}>
      <div className="service-header">
        <div className="service-title">
          <span className="service-icon">üîß</span>
          <span className="service-text">Processing Status</span>
        </div>
        <div className="service-controls">
          <div className={`status-indicator ${getStatusClass()}`}>
            <span className="status-icon">{getStatusIcon()}</span>
            <span className="status-text">{getStatusText()}</span>
          </div>
          {isCompact && (
            <button 
              className="collapse-btn"
              onClick={() => setIsExpanded(false)}
              aria-label="Collapse service information"
            >
              ‚ñº
            </button>
          )}
        </div>
      </div>
      
      <div className="service-content">
        {/* üé® –¢–æ–∫–µ–Ω—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
        <div className="service-line tokens-line">
          <span className="line-icon">üìä</span>
          <span className="line-label">Tokens:</span>
          <span className="line-value token-value">
            {animatedTokens.toLocaleString()}
            {serviceInfo.usage.input_tokens > 0 && (
              <span className="token-breakdown">
                {' '}(in: {serviceInfo.usage.input_tokens.toLocaleString()})
              </span>
            )}
          </span>
          {(serviceInfo.status === 'processing' || serviceInfo.status === 'initializing') && (
            <span className="updating-indicator">‚óè</span>
          )}
        </div>

        {/* üé® –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
        <div className="service-line time-line">
          <span className="line-icon">‚è±Ô∏è</span>
          <span className="line-label">Time:</span>
          <span className="line-value">
            {formatTime(elapsedTime)}
            {serviceInfo.status === 'completed' && serviceInfo.duration && (
              <span className="final-duration"> (final: {formatTime(serviceInfo.duration / 1000)})</span>
            )}
          </span>
        </div>

        {/* üé® –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã */}
        {getActiveTools().length > 0 && (
          <div className="service-line tools-line">
            <span className="line-icon">üõ†Ô∏è</span>
            <span className="line-label">Active Tools:</span>
            <span className="line-value">
              {getActiveTools().map((tool, index) => (
                <span key={tool.id} className="tool-item active">
                  {tool.name}
                  {tool.status === 'running' && <span className="tool-status running">‚óè</span>}
                  {tool.status === 'pending' && <span className="tool-status pending">‚è≥</span>}
                  {index < getActiveTools().length - 1 && ' ‚Üí '}
                </span>
              ))}
            </span>
          </div>
        )}

        {/* üé® –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã */}
        {getCompletedTools().length > 0 && (
          <div className="service-line tools-line">
            <span className="line-icon">‚úÖ</span>
            <span className="line-label">Completed:</span>
            <span className="line-value">
              {getCompletedTools().map((tool, index) => (
                <span key={tool.id} className="tool-item completed">
                  {tool.name}
                  {tool.duration && <span className="tool-duration">({formatTime(tool.duration / 1000)})</span>}
                  {index < getCompletedTools().length - 1 && ', '}
                </span>
              ))}
            </span>
          </div>
        )}

        {/* üé® Thinking –ø—Ä–æ—Ü–µ—Å—Å */}
        {serviceInfo.thinking && (
          <div className="service-line thinking-line">
            <span className="line-icon">üß†</span>
            <span className="line-label">Thinking:</span>
            <span className="line-value thinking-value">
              "{serviceInfo.thinking.length > 80 
                ? serviceInfo.thinking.substring(0, 80) + '...' 
                : serviceInfo.thinking}"
            </span>
          </div>
        )}

        {/* üé® –ö—ç—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {serviceInfo.usage.cache_read_input_tokens && serviceInfo.usage.cache_read_input_tokens > 0 && (
          <div className="service-line cache-line">
            <span className="line-icon">üíæ</span>
            <span className="line-label">Cache:</span>
            <span className="line-value">
              {serviceInfo.usage.cache_read_input_tokens.toLocaleString()} tokens read
              {serviceInfo.usage.cache_creation_input_tokens && (
                <span className="cache-creation">
                  {' '}({serviceInfo.usage.cache_creation_input_tokens.toLocaleString()} created)
                </span>
              )}
            </span>
          </div>
        )}

        {/* üé® –°—Ç–æ–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞) */}
        {serviceInfo.usage.cost_estimate && serviceInfo.usage.cost_estimate > 0 && (
          <div className="service-line cost-line">
            <span className="line-icon">üí∞</span>
            <span className="line-label">Cost:</span>
            <span className="line-value">
              ${serviceInfo.usage.cost_estimate.toFixed(4)}
              {serviceInfo.usage.service_tier && (
                <span className="service-tier"> ({serviceInfo.usage.service_tier})</span>
              )}
            </span>
          </div>
        )}
      </div>
    </div>
  );
};