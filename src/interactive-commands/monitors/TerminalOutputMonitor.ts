import * as vscode from 'vscode';
import { TerminalMonitorConfig } from '../types';

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
 */
export class TerminalOutputMonitor {
  private outputBuffer: Map<string, string[]> = new Map();
  private activeMonitors: Map<string, NodeJS.Timeout> = new Map();
  private listeners: Map<string, (output: string) => void> = new Map();
  private outputChannel: vscode.OutputChannel;
  private config: TerminalMonitorConfig;

  constructor(outputChannel: vscode.OutputChannel, config?: Partial<TerminalMonitorConfig>) {
    this.outputChannel = outputChannel;
    this.config = {
      maxBufferSize: config?.maxBufferSize ?? 1000,
      outputTimeout: config?.outputTimeout ?? 5000,
      debounceDelay: config?.debounceDelay ?? 300,
      ...config
    };
  }

  /**
   * –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
   */
  startMonitoring(sessionId: string, terminal: vscode.Terminal, callback: (output: string) => void): void {
    this.outputChannel.appendLine(`üì° Starting terminal monitoring for session: ${sessionId}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
    this.listeners.set(sessionId, callback);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä
    if (!this.outputBuffer.has(sessionId)) {
      this.outputBuffer.set(sessionId, []);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Terminal Data Write Listener
    const writeEmitter = (terminal as any).onDidWriteData;
    if (writeEmitter) {
      const disposable = writeEmitter((data: string) => {
        this.handleTerminalData(sessionId, data);
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º disposable –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
      (terminal as any)._outputMonitorDisposable = disposable;
    } else {
      this.outputChannel.appendLine(`‚ö†Ô∏è Terminal does not support onDidWriteData for session: ${sessionId}`);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
   */
  stopMonitoring(sessionId: string, terminal?: vscode.Terminal): void {
    this.outputChannel.appendLine(`üõë Stopping terminal monitoring for session: ${sessionId}`);
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    const timer = this.activeMonitors.get(sessionId);
    if (timer) {
      clearTimeout(timer);
      this.activeMonitors.delete(sessionId);
    }

    // –û—á–∏—â–∞–µ–º listener
    this.listeners.delete(sessionId);
    
    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
    this.outputBuffer.delete(sessionId);

    // Dispose terminal listener –µ—Å–ª–∏ –µ—Å—Ç—å
    if (terminal && (terminal as any)._outputMonitorDisposable) {
      (terminal as any)._outputMonitorDisposable.dispose();
      delete (terminal as any)._outputMonitorDisposable;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
   */
  private handleTerminalData(sessionId: string, data: string): void {
    const buffer = this.outputBuffer.get(sessionId);
    if (!buffer) return;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
    buffer.push(data);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    if (buffer.length > this.config.maxBufferSize) {
      buffer.splice(0, buffer.length - this.config.maxBufferSize);
    }

    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    const existingTimer = this.activeMonitors.get(sessionId);
    if (existingTimer) {
      clearTimeout(existingTimer);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä —Å debounce
    const timer = setTimeout(() => {
      this.processBuffer(sessionId);
    }, this.config.debounceDelay);

    this.activeMonitors.set(sessionId, timer);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
   */
  private processBuffer(sessionId: string): void {
    const buffer = this.outputBuffer.get(sessionId);
    const callback = this.listeners.get(sessionId);
    
    if (!buffer || !callback || buffer.length === 0) return;

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±—É—Ñ–µ—Ä –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    const output = buffer.join('');
    
    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
    buffer.length = 0;

    // –í—ã–∑—ã–≤–∞–µ–º callback
    try {
      callback(output);
    } catch (error) {
      this.outputChannel.appendLine(`‚ùå Error in terminal monitor callback: ${error}`);
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
   */
  flushBuffer(sessionId: string): void {
    this.processBuffer(sessionId);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
   */
  dispose(): void {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
    for (const [sessionId] of this.listeners) {
      this.stopMonitoring(sessionId);
    }
  }
}