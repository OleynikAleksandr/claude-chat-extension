import * as vscode from 'vscode';
import { InteractiveCommandRegistry } from './core/InteractiveCommandRegistry';
import { TerminalOutputMonitor } from './monitors/TerminalOutputMonitor';
import { ResumeCommandHandler } from './handlers/ResumeCommandHandler';
import { IInteractiveCommandHandler, InteractiveCommandEvents, UserResponse } from './types';

/**
 * –§–∞—Å–∞–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export class InteractiveCommandManager {
  private registry: InteractiveCommandRegistry;
  private monitor: TerminalOutputMonitor;
  private outputChannel: vscode.OutputChannel;
  private eventEmitter: vscode.EventEmitter<InteractiveCommandEvents[keyof InteractiveCommandEvents]>;
  
  // –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ —Å–µ—Å—Å–∏—è–º
  private activeCommands: Map<string, {
    command: string;
    handler: IInteractiveCommandHandler;
    data?: any;
  }> = new Map();

  constructor(outputChannel: vscode.OutputChannel) {
    this.outputChannel = outputChannel;
    this.registry = new InteractiveCommandRegistry(outputChannel);
    this.monitor = new TerminalOutputMonitor(outputChannel);
    this.eventEmitter = new vscode.EventEmitter();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.registerBuiltInHandlers();
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
   */
  private registerBuiltInHandlers(): void {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /resume
    const resumeHandler = new ResumeCommandHandler(this.outputChannel);
    this.registry.register(resumeHandler);
    
    this.outputChannel.appendLine('‚úÖ Built-in interactive command handlers registered');
  }

  /**
   * –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–µ—Å—Å–∏–∏
   */
  startCommandTracking(sessionId: string, command: string, terminal: vscode.Terminal): void {
    const handler = this.registry.getHandler(command);
    if (!handler) {
      this.outputChannel.appendLine(`‚ö†Ô∏è No handler registered for command: ${command}`);
      return;
    }

    this.outputChannel.appendLine(`üéØ Starting interactive command tracking: ${command} for session ${sessionId}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    this.activeCommands.set(sessionId, { command, handler });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    this.monitor.startMonitoring(sessionId, terminal, (output) => {
      this.handleTerminalOutput(sessionId, output);
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    this.fireEvent('commandStarted', { sessionId, command });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
   */
  private handleTerminalOutput(sessionId: string, output: string): void {
    const activeCommand = this.activeCommands.get(sessionId);
    if (!activeCommand) return;

    const { handler, command } = activeCommand;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –≤—ã–≤–æ–¥
    if (!handler.canHandle(output)) {
      return;
    }

    this.outputChannel.appendLine(`üì® Processing interactive output for ${command}`);
    
    // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥
    const parsed = handler.parseOutput(output);
    
    if (parsed.success && parsed.requiresInput) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      activeCommand.data = parsed.data;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
      this.fireEvent('inputRequired', {
        sessionId,
        command,
        data: parsed.data,
        prompt: parsed.prompt || 'Please make a selection:'
      });
    } else if (!parsed.success) {
      this.outputChannel.appendLine(`‚ùå Failed to parse output: ${parsed.error}`);
      this.stopCommandTracking(sessionId);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  handleUserResponse(response: UserResponse): string | null {
    const activeCommand = this.activeCommands.get(response.sessionId);
    if (!activeCommand) {
      this.outputChannel.appendLine(`‚ö†Ô∏è No active command for session: ${response.sessionId}`);
      return null;
    }

    const { handler, command, data } = activeCommand;
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
    if (!handler.validateSelection(response.selection, data)) {
      this.outputChannel.appendLine(`‚ùå Invalid selection: ${response.selection}`);
      return null;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    const terminalResponse = handler.formatResponse(response.selection);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    this.fireEvent('userResponded', {
      sessionId: response.sessionId,
      command,
      selection: response.selection
    });
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    this.stopCommandTracking(response.sessionId);
    
    return terminalResponse;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
   */
  stopCommandTracking(sessionId: string, terminal?: vscode.Terminal): void {
    const activeCommand = this.activeCommands.get(sessionId);
    if (!activeCommand) return;

    this.outputChannel.appendLine(`üõë Stopping command tracking for session: ${sessionId}`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    this.monitor.stopMonitoring(sessionId, terminal);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    this.fireEvent('commandCompleted', {
      sessionId,
      command: activeCommand.command,
      success: true
    });
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    this.activeCommands.delete(sessionId);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π
   */
  isInteractiveCommand(command: string): boolean {
    return this.registry.hasHandler(command);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–µ—Å—Å–∏–∏
   */
  getActiveCommand(sessionId: string): string | undefined {
    return this.activeCommands.get(sessionId)?.command;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  registerHandler(handler: IInteractiveCommandHandler): void {
    this.registry.register(handler);
  }

  /**
   * –°–æ–±—ã—Ç–∏—è
   */
  get onCommandStarted(): vscode.Event<InteractiveCommandEvents['commandStarted']> {
    return this.eventEmitter.event as any;
  }

  get onInputRequired(): vscode.Event<InteractiveCommandEvents['inputRequired']> {
    return this.eventEmitter.event as any;
  }

  get onUserResponded(): vscode.Event<InteractiveCommandEvents['userResponded']> {
    return this.eventEmitter.event as any;
  }

  get onCommandCompleted(): vscode.Event<InteractiveCommandEvents['commandCompleted']> {
    return this.eventEmitter.event as any;
  }

  private fireEvent<K extends keyof InteractiveCommandEvents>(
    _event: K,
    data: InteractiveCommandEvents[K]
  ): void {
    this.eventEmitter.fire(data as any);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  dispose(): void {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    for (const [sessionId] of this.activeCommands) {
      this.stopCommandTracking(sessionId);
    }
    
    // –û—á–∏—â–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    this.registry.clear();
    
    // Dispose monitor
    this.monitor.dispose();
    
    // Dispose event emitter
    this.eventEmitter.dispose();
  }
}