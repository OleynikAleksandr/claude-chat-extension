import { IInteractiveCommandHandler } from '../types';
import * as vscode from 'vscode';

/**
 * –†–µ–µ—Å—Ç—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
 */
export class InteractiveCommandRegistry {
  private handlers: Map<string, IInteractiveCommandHandler> = new Map();
  private outputChannel: vscode.OutputChannel;

  constructor(outputChannel: vscode.OutputChannel) {
    this.outputChannel = outputChannel;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
   */
  register(handler: IInteractiveCommandHandler): void {
    const command = handler.command;
    
    if (this.handlers.has(command)) {
      this.outputChannel.appendLine(`‚ö†Ô∏è Handler for command '${command}' is already registered, replacing...`);
    }

    this.handlers.set(command, handler);
    this.outputChannel.appendLine(`‚úÖ Registered handler for command: ${command}`);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
   */
  unregister(command: string): boolean {
    const result = this.handlers.delete(command);
    if (result) {
      this.outputChannel.appendLine(`üóëÔ∏è Unregistered handler for command: ${command}`);
    }
    return result;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
   */
  getHandler(command: string): IInteractiveCommandHandler | undefined {
    return this.handlers.get(command);
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
   */
  findHandlerForOutput(output: string): IInteractiveCommandHandler | undefined {
    for (const [command, handler] of this.handlers) {
      if (handler.canHandle(output)) {
        this.outputChannel.appendLine(`üéØ Found handler for output: ${command}`);
        return handler;
      }
    }
    return undefined;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
   */
  hasHandler(command: string): boolean {
    return this.handlers.has(command);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
   */
  getRegisteredCommands(): string[] {
    return Array.from(this.handlers.keys());
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
   */
  clear(): void {
    this.handlers.clear();
    this.outputChannel.appendLine('üßπ Cleared all interactive command handlers');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
   */
  get size(): number {
    return this.handlers.size;
  }
}